// this is a shortcut to center any block element
@mixin center-auto {
    margin: {
        left: auto;
        right: auto;
    }
}

// Example:
// div {
//     @include center-auto()
// }

// This is a simple way to define a box
@mixin box($width, $height:$width) {
    width: $width;
    height: $height;
}

// Example:
// div {
//     @include box(200px)
// }

// div {
//     @include box(200px, 100px)
// }

@mixin cover-background {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
}

// Example:
// div {
//     background-image: url('this.png');
//     @include cover-background()
// }

// Flex-box toolkit
@mixin flex-column {
    display: flex;
    flex-direction: column;
}

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-center-column {
    @include flex-center();
    flex-direction: column;
}

@mixin pseudo( $width: 100%, $height: 100%, $display: block, $position: absloute, $content: "") {
    content: $content;
    display: $display;
    position: $position;
    @include box($width, $height)
};

// Example: 
// div {
//     position: relative;
//     width: 200px;
//     height: 200px;
//     &::after {
//         @include pseudo(200px, 100px);
//         background-color: linear-gradient();
//     }
// }

// positoning helpers
@mixin positon($position, $args) {
    @each $pos in top right bottom left {
        $i: index($args, $pos);
        @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) {
            #{$pos}: nth($args, $i + 1)
        }
    }
    position: $position;
}

@mixin absolute($args: " ") {
    @include positon(absloute, $args);
}

@mixin fixed($args: " ") {
    @include positon(fixed, $args);
}

@mixin relative($args: " ") {
    @include positon(relative, $args);
}

.menu li {
    @include absolute(top 100% left 0)
}

.sticky-bar {
    @include fixed(top 0 left 0)
}

.submenu {
    @include relative()
}

$phone-wide: 480px;
$phablet: 560px;
$tablet-small: 640px;
$tablet: 768px;
$large: 1024px;
$desktop: 1280px;
$desktop-wide: 1440px;

// @mixin phone {
//     @media only screen and (min-width: $phone) {
//         @content;
//     }
// }

@mixin tablet {
    @media only screen and (min-width: $tablet) {
        @content;
    }
}

@mixin large {
    @media only screen and (min-width: $large) {
        @content;
    }
}

@mixin desk {
    @media only screen and (min-width: $desk) {
        @content;
    }
}

// div {
//     font-size: 3rem;
//     @include tablet() {
//         font-size: 2rem;
//     }
// }

@mixin fade($type) {
    @if $type == "hide" {
        visibility: hidden;
        opacity: 0;
        transition: $transition;
        // transition: visibility 1s opacity 1s;
    } @else if $type == 'show' {
        visibility: visible;
        opacity: 1;
        transition: $transition;
    }
}

// mixin for input-placeholder colors
@mixin input-placeholder {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}

// div {
//     @include input-placeholder() {
//         color: red;
//     }
// }

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-name + ".eot");
        src: url($file-name + ".eot?#iefix") format("embedded-opentype"),
            url($file-name + '.woff') format("woff"),
            url($file-name + '.ttf') format("truetype"),
            url($file-name + '.svg') format("svg");
        font-weight: $weight;
        font-style: $style;
    }
}

// @include font-face("MyFont", './base/typeography/myfont.ttf', $style: underline);

// div {
//     font-family: 'MyFont';
// }

@mixin text-short {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// creating css triangles
@mixin css-triangle($color, $direction, $size: 6px, $pos: absloute, $round: false){
    @include pseudo($position: $pos);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == "down" {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round($size / 2.5);
    }
    @else if $direction == "up" {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round($size / 2.5);
    }
    @else if $direction == "right" {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    }
    @else if $direction == "left" {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

// menu.li {
//     @include css-triangle(red, right, 12px)
// }